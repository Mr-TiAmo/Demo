redis
    1.对key过期后的监听
        设置 RedisConfiguration
        /** redis 监听设置    在 redis安装包下 redis.conf 配置文件里面找到 # notify-keyspace-events Ex 去掉注释，然后重启redis
            keyspace 为前缀的频道被称为键空间通知(key-space notification)
            keyevent 为前缀的频道则被称为键事件通知(key-event notification)
            事件是用 keyspace@DB:KeyPattern 或者 keyevent@DB:OpsType 的格式来发布消息的
                DB 表示在第几个数据库
                KeyPattern 则是表示需要监控的键模式(可以用通配符,如: key*:*)
                OpsType 则表示操作类型
        **/
            @Bean
            public ChannelTopic expiredTopic() {
                // 选择0号数据库
                return new ChannelTopic("__keyevent@0__:expired");
        //        return new ChannelTopic("__keyspace@0__:sampleKey  expired");
            }

            @Bean
            public RedisMessageListenerContainer redisMessageListenerContainer(RedisConnectionFactory redisConnectionFactory) {
                RedisMessageListenerContainer redisMessageListenerContainer = new RedisMessageListenerContainer();
                redisMessageListenerContainer.setConnectionFactory(redisConnectionFactory);
                return redisMessageListenerContainer;
            }

    2.消息的发布订阅
        A 基于监听模式
            设置 RedisConfiguration
             /** redis  消息发布订阅 **/
                @Bean
                RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory,
                                                        MessageListenerAdapter listenerAdapterA,
                                                        MessageListenerAdapter listenerAdapterB) {
                    RedisMessageListenerContainer container = new RedisMessageListenerContainer();
                    container.setConnectionFactory(connectionFactory);

                    //可以添加多个 messageListener 消息监听，绑定订阅主题
                    container.addMessageListener(listenerAdapterA, new PatternTopic("index"));
                    container.addMessageListener(listenerAdapterB, new PatternTopic("home"));

                    return container;
                }

                @Bean
                MessageListenerAdapter listenerAdapterA(RedisReceiver redisReceiver) {
                    System.out.println("消息适配器A进来了--- 匹配redisReceiver中的receiveMessageA() ");
                    return new MessageListenerAdapter(redisReceiver, "receiveMessageA");
                }

                @Bean
                MessageListenerAdapter listenerAdapterB(RedisReceiver redisReceiver) {
                    System.out.println("消息适配器B进来了--- 匹配redisReceiver中的receiveMessageB() ");
                    return new MessageListenerAdapter(redisReceiver, "receiveMessageB");
                }

            映射适配器方法
                @Component
                public class RedisReceiver {
                    /**  receiveMessageA() receiveMessageB() 匹配 redis config 中的 MessageListenerAdapter 消息监听适配器 **/

                    public void receiveMessageA(String message) {
                        //这里是收到通道的消息之后执行的方法
                        System.out.println("A监听到消息："+message);
                    }
                    public void receiveMessageB(String message) {
                        //这里是收到通道的消息之后执行的方法
                        System.out.println("B监听到消息："+message);
                    }
                }

            发送消息
                 redisTemplate.convertAndSend("topic", message);

        B

    3.redis 布隆过滤器 (https://www.cnblogs.com/wmyskxz/p/12461766.html)
        应用：
           解决缓存穿透的问题
               一般情况下，先查询redis缓存是否有该条数据，缓存中没有时，再查询数据库。当大量访问来临时，每次查询都要访问数据库，
               导致数据库宕机，这就是缓存穿透。缓存穿透带来的问题是，当有大量请求查询redis缓存不存在的数据时，就会给数据库带来压力，甚至会拖垮数据库。
               可以使用布隆过滤器解决缓存穿透的问题，把已存在数据的key存在布隆过滤器中。当有新的请求时，先到布隆过滤器中查询是否存在，
               如果不存在该条数据直接返回；如果存在该条数据再查询缓存查询数据库。

           黑名单校验
               发现存在黑名单中的，就执行特定操作。比如：识别垃圾邮件，只要是邮箱在黑名单中的邮件，就识别为垃圾邮件。
               假设黑名单的数量是数以亿计的，存放起来就是非常耗费存储空间的，布隆过滤器则是一个较好的解决方案。
               把所有黑名单都放在布隆过滤器中，再收到邮件时，判断邮件地址是否在布隆过滤器中即可

        布隆过滤器相对于Set、Map 等数据结构来说，它可以更高效地插入和查询，并且占用空间更少，它也有缺点，
        就是判断某种东西是否存在时，可能会被误判。但是只要参数设置的合理，它的精确度也可以控制的相对精确，只会有小小的误判概率

        A 谷歌布隆过滤器 (维护在内存中，服务重启会清空)
            BloomFilter<Integer> bloomFilter = BloomFilter.create(Funnels.integerFunnel(), size, 0.03)
            参数1：数据类型的构造器
            参数2：当前布隆过滤器的总容量
            参数3：容错因子 当存储数据接近 总容量时，会产生误判，容错因子越小，误判的几率越小，但占用的空间越大

        B redis布隆过滤器 (可以持久化到redis服务中)
            BloomFilterHelper(Funnel<T> funnel, int expectedInsertions, double fpp)
            参数1：数据类型的构造器
            参数2：当前布隆过滤器的总容量 当实际元素的数量超过这个初始化容量时，误判率上升
            参数3：容错因子 容错因子越小，误判的几率越小，但占用的空间越大

            原理：
                长度为M 的位向量或位列表(只包含0、1位值的列表)，初始值都为0，通过多个hash函数对 key进行位运算，获取一个证书索引值，
                然后对位数组长度进行取模运算，每个hash函数会算的一个不同的位置，把数组的这几个位置设为1，就完成了add操作

                查询是否存在是，通过key与多个hash函数进行运算，查看对应的位置是否为1 ，全部为1，判定存在， 有为0，判不存在 会存在误判系数




