AQS 流程：
    AQS AbstractQueuedSynchronizer,实现依赖于先进先出 (FIFO) 等待队列的阻塞锁定和相关同步器（信号量、事件，等等）提供一个框架

    AQS中有一个静态内部类Node，主要对访问同步代码块的线程进行封装，用来构建一个双链表结构的同步队列，包含线程以及状态(waitStatus)
    condition表示是否被阻塞，signal表示是否被唤醒，cancelled表示是否被取消，以及两个变量shared表示共享锁，exclusive表示独占锁
    每个node节点有一个前驱节点和后继节点，方便线程释放锁后快速唤醒下一个等待的线程

    当尝试获取锁时会调用lock()方法时，如果有其他线程竞争锁资源，最终会调用AQS的acquire()方法：
        tryAcquire()：作用是获取同一时间段内只能被一个线程获取的量，这个量就是抽象化的锁概念
            如果volatile修饰的state变量为0 ，当前独占性变量还未被线程占有，然后判断阻塞队列是否有先来的线程在等待，如果没有把当前线程设置为独占性变量的拥有者；
            如果不为0，判断当前线程是否等于独占性变量的拥有者，如果是表明当前线程的重入，将state的值+1；
            其他情况获取锁失败
        addWaiter()：给当前线程创建一个节点，将其加入等待队列
            如果等待队列之前没有节点，则当前线程为头结点，如果等待队列有节点，则当前节点放在队列尾部，同时前驱节点指向上一个等待的线程节点
        acquireQueued(): 避免试图获取独占性变量的线程进入阻塞状态
            如果当前节点的为等待队列的第一个节点，再次尝试获取独占性变量，成功返回false，表示不用调用中断函数，同时通过
            如果当前节点的前驱节点还有别的线程在等待，通过shouldParkAfterFailedAcquire()判读是否需要进入阻塞状态，如果需要阻塞返回true，执行中断函数
                通过shouldParkAfterFailedAcquire():
                    如果前驱节点的状态为signal，表示前一个节点正在等待获取独占性变量，所以当前节点直接阻塞
                    如果前驱节点处于取消获取独占性变量，则跳过
                通过parkAndCheckInterrupt()：
                    调用lockSupport.part()方法挂起线程

            最后如果当前线程被取消，直接通过cancelAcquire()取消获取锁

        selfInterrupt(): 中断线程

    当尝试释放锁时会调用unlock()方法时，最终会调用AQS的release():
        tryRelease(): 只有unlock()和lock()的次数相同，才会将独占性变量置为空

    AQS还有一个内部类ConditionObject构建等待队列，当Condition调用wait()后，线程会加入等待队列中，当Condition调用signal(),线程会从等待队列移动到同步队列中进行锁竞争






















